/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * tsoa-example
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'



/**
 * Retrieves the details of an existing template
 */
export const getWeatherReport = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.get(
      `/tenerate`,options
    );
  }


export const getGetWeatherReportQueryKey = () => {
    
    return [`/tenerate`] as const;
    }
  

    
export const getGetWeatherReportQueryOptions = <TData = Awaited<ReturnType<typeof getWeatherReport>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherReport>>, TError, TData>, axios?: AxiosRequestConfig}
) => {
    
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWeatherReportQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeatherReport>>> = ({ signal }) => getWeatherReport({ signal, ...axiosOptions });

      
    
      
      
   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWeatherReport>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWeatherReportQueryResult = NonNullable<Awaited<ReturnType<typeof getWeatherReport>>>
export type GetWeatherReportQueryError = AxiosError<unknown>

export const useGetWeatherReport = <TData = Awaited<ReturnType<typeof getWeatherReport>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherReport>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetWeatherReportQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


